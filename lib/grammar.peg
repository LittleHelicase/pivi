start
 = cmd:command ("#" .*)? { return cmd; }

command
  = primitive / property
  / bracket / float / emptyline

emptyline = ws { return {}; }

bracket
 = "[" { return { type: "push" }; } / "]" { return { type: "pop" }; }

primitive = points / line_types / circles

property = pointSize / color

line_types = line / polyline
// draw separated lines
line = ( ("line" wsc) / "lines" ) pts:(tupel)* { return { type: "lines", data: pts }; }
// draw multiple connected lines
polyline = "polyline" pts:(tupel)* { return { type: "polyline", data : pts }; }

points
  = ( ("point" wsc) / "points" ) pts:(tupel)* { return { type: "points", data: pts }; }

circles = "circle" cs:(circle)* { return { type: "circles", data: cs }; }
circle = pos:tupel r:float ws { return [pos,r]; }

pointSize = "pointSize" ws size:ufloat { return { type: "property", property: "pointSize", data: size }; }

color = "color" color:utupel3 { return { type: "property", property: "color", data: color }; }

tupel
 = ws first:float ws second:float ws { return {x: first, y: second }; }

utupel3
 = ws first:ufloat ws second:ufloat ws third:ufloat ws { return {x: first, y: second, z: third }; }

ws = wsc*
wsc = ( "(" / " " / ")" / "," / [\t] )

float
  = num:$("-"? digits ( "." digits )? ( "e" digits)?) { return parseFloat(num); }

// unsigned float for color, pointSize etc.
ufloat
  = num:$(digits ( "." digits )? ( "e" digits)?) { return parseFloat(num); }

digits = [0-9]+
